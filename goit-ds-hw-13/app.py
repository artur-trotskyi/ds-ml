# app.py
import streamlit as st
import numpy as np
import time
from PIL import Image
import matplotlib.pyplot as plt
from models import load_model_from_file, load_history

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title="–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ–¥—è–≥—É", layout="centered")

st.title("üß† –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ Fashion MNIST")

# ===== –ù–∞–∑–≤–∏ –∫–ª–∞—Å—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é =====
class_names = [
    "–§—É—Ç–±–æ–ª–∫–∞/—Ç–æ–ø",  # 0
    "–®—Ç–∞–Ω–∏",         # 1
    "–°–≤–µ—Ç—Ä",         # 2
    "–°—É–∫–Ω—è",         # 3
    "–ü–∞–ª—å—Ç–æ",        # 4
    "–ë–æ—Å–æ–Ω—ñ–∂–∫–∏",     # 5
    "–°–æ—Ä–æ—á–∫–∞",       # 6
    "–ö—Ä–æ—Å—ñ–≤–∫–∏",      # 7
    "–°—É–º–∫–∞",         # 8
    "–ß–µ—Ä–µ–≤–∏–∫–∏"       # 9
]

# ===== –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å =====
uploaded_file = st.file_uploader("üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", type=["png", "jpg", "jpeg"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    st.image(image, caption="üñºÔ∏è –í—Ö—ñ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", width=150)

    # –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ
    model_choice = st.radio("üîç –û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è:", ("CNN Model", "VGG16 Model"))

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ
    if model_choice == "CNN Model":
        model = load_model_from_file("cnn_model_6.keras")
        history = load_history('CNN')
        processed_image = image.convert("L").resize((28, 28))
        image_array = np.array(processed_image).reshape(1, 28, 28, 1).astype("float32") / 255.0
    else:
        model = load_model_from_file("cnn_model_6_vgg16.keras")
        history = load_history('VGG16')
        processed_image = image.convert("RGB").resize((48, 48))
        image_array = np.array(processed_image).reshape(1, 48, 48, 3).astype("float32") / 255.0

    # –°–ø—ñ–Ω–µ—Ä + –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —â–µ –Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–∏–ª–∏)
    if "prediction" not in st.session_state or uploaded_file.name != st.session_state.get("last_uploaded_file") or model_choice != st.session_state.get("last_model_choice"):
        with st.spinner("‚è≥ –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª—ñ–∑—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è..."):
            time.sleep(1.5)  # —à—Ç—É—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
            prediction = model.predict(image_array)
            st.session_state.prediction = prediction
            st.session_state.last_uploaded_file = uploaded_file.name
            st.session_state.last_model_choice = model_choice
    else:
        prediction = st.session_state.prediction

    predicted_class = int(np.argmax(prediction))
    confidence = float(prediction[0][predicted_class]) * 100

    st.success("‚úÖ –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    st.markdown(f"### ‚úÖ –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏–π –∫–ª–∞—Å: **{class_names[predicted_class]}** ({confidence:.2f}%)")

    st.subheader("üìä –ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É:")
    chart_data = {class_names[i]: float(prediction[0][i]) for i in range(10)}
    st.bar_chart(chart_data)

    # ===== –ì—Ä–∞—Ñ—ñ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è =====
    with st.expander("üìâ –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –≤—Ç—Ä–∞—Ç —Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ"):
        if history:
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

            ax1.plot(history["loss"], label="–í—Ç—Ä–∞—Ç–∞ (—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è)")
            ax1.plot(history["val_loss"], label="–í—Ç—Ä–∞—Ç–∞ (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è)")
            ax1.set_title("–§—É–Ω–∫—Ü—ñ—è –≤—Ç—Ä–∞—Ç")
            ax1.legend()

            ax2.plot(history["accuracy"], label="–¢–æ—á–Ω—ñ—Å—Ç—å (—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è)")
            ax2.plot(history["val_accuracy"], label="–¢–æ—á–Ω—ñ—Å—Ç—å (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è)")
            ax2.set_title("–¢–æ—á–Ω—ñ—Å—Ç—å")
            ax2.legend()

            st.pyplot(fig)
        else:
            st.warning("‚ö†Ô∏è –§–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
